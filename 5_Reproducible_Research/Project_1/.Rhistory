a$getInverse()
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
cacheSolve(a)
a$getInverse()
b = a$getInverse()
a$get() %*% b
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
##This function creates a special "matrix"
##object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
#assign the value of the matrix
set <- function(y) {
x <<- y
m <<- NULL
}
#return the content of x
get <- function() x
#set the inverse value of the matrix
setInverse <- function(solve) m <<- solve
#return the inverse of the content of x
getInverse <- function() m
#functions wrapped in list
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
##This function computes the inverse of the special "matrix"
##returned by makeCacheMatrix above
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
#query the x matrix's cache
m <- x$getInverse()
#if there is a cache, then return the cache, no
#computation needed
if(!is.null(m)) {
message("getting cached data")
return(m)
}
#if there is no cache, then compute them and
#save the result back to x's cache, and
#return the result
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
a <- cacheMatrix(matrix(1:4,2))
a <- cachematrix(matrix(1:4,2))
getwd()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
##This function creates a special "matrix"
##object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
#assign the value of the matrix
set <- function(y) {
x <<- y
m <<- NULL
}
#return the content of x
get <- function() x
#set the inverse value of the matrix
setInverse <- function(solve) m <<- solve
#return the inverse of the content of x
getInverse <- function() m
#functions wrapped in list
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Write a short comment describing this function
##This function computes the inverse of the special "matrix"
##returned by makeCacheMatrix above
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
#query the x matrix's cache
m <- x$getInverse()
#if there is a cache, then return the cache, no
#computation needed
if(!is.null(m)) {
message("getting cached data")
return(m)
}
#if there is no cache, then compute them and
#save the result back to x's cache, and
#return the result
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
a <- cachematrix(matrix(1:4,2))
a <- makeCacheMatrix(matrix(1:4,2))
a
a$get()
95/1000
p <- 85 / (85 + 15)
p
r <- 85 / (90)
r
f1 <- (2 * p * r) / (p + r)
f1
r
16+3.85+3.95+3.7+3.8
31.3/8
library(lattice)
data(lattice)
??lattice
library(datasets)
hist(datasets)
par("lty")
x <- rnorm(1000)
hist(x)
x <- rnorm(100)
hist(x)
?Devices
install.packages("knitr")
library(datasets)
data(airquality)
summary(airquality)
23/30
116*.77
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
temp
rownames(temp) <- c("X", "Prob")
temp
mean(temp)
round(mean(temp))
.17+.6
.77-.12
6/100
.17+.06
.23-.12
.11*100
quantile(1)
qnorm(1)
var(1)
quantile(0.5)
.25*.25
.5-.0625
1.5*1.5
2.5-2.25
2.5-.0625
x
p
sum(x * p)
w <- 1
sum(w * p)
mean(w * p)
2*.2
3*.3
4*.4
1*.1
.1+.9+.16+.4
1.56/4
mean(x * p)
x
p
t(x)
t <- t(x)
mean(t * p)
temp
sum(temp)
mean(temp)
sum(t * p)
x
p
sum(x * p)
mean(10)
9/11
.81*136
5000*26
70/80
0.875 * 100
(87.5 * 80) / ((87.5 * 80) + 30)
1 - (70 / 80)
20*12.5
70 / (70 + 250)
70 / (70 + 12.5)
0.8484848 * 100
round(0.8484848 * 100)
mean(52, 75)
(52 + 75) / 2
(75 * .3) / ((1 - 0.636) * .7 + (.75 * .3))
1-.997
1-.635
x <- .75 * .3
x
x / (x + (.365 * .7))
0.4682622 * 100
round(0.4682622 * 100)
pnorm(.7, .80, .1)
0.1586553 * 100
pnorm(70, 80, 10)
pnorm(70, 80, 10) * 100
round(pnorm(70, 80, 10) * 100)
pnorm(95, mean=1100, sd = 75)
quantile(pnorm(95, mean=1100, sd = 75))
quantile(pnorm(1, mean=1100, sd = 75))
quantile(pnorm(100, mean=1100, sd = 75))
1.645*75 + 1100
round(1223.375)
r6 <- pbinom(5, 4, 5, lower.tail = F)
r6 <- pbinom(5, 4, probs=c(0, 1), lower.tail = F)
r6 <- pbinom(5, 4, 1, lower.tail = F)
r6
pnorm(100, 1100, 75*75)
0.4294488 * 100
qnorm(100, 1100, 75)
qnorm(100, 1100, 75, lower.tail=F)
pbinom(5, 21, lower.tail=F)
pbinom(5, 2, 1, lower.tail=F)
pbinom(5, 4, 1, lower.tail=F)
pbinom(1, 5, 1, lower.tail=F)
pbinom(05, 5, 1, lower.tail=F)
pbinom(.5, 5, 1, lower.tail=F)
(2.95*3)/2
6/1.96
1-.95
.05*3
6.15/1.96
.95*3
2.85+6
8.85/1.96
1100/.95
c <- c("NA", 4)
is.na(C)
is.na(c)
c <- c(NA, 4)
is.na(c)
c[is.na(c) = 1]
c[is.na(c)] = 1
c
10000/240
50*18
26*50
60.5/63
1-.96
(696/7) * .5
21/30
500+96+70
(666/7) * .5
9/15
.8/4
2.8/4
18/22
(60+80+70+50+82)/5
68.4 * .2
47.57143 + 13.68
61.3
70-61.3
20*15
23.62/69
(23.62/69) * .3
(23.62/69) * 30
47.57143 + 10.26957 + 13.68
10/sqrt(100)
75/10
1100+(7.5*1.96)
1100-(7.5*1.96)
sd <-
1
mean <- 15
round((pnorm(16, mean, sd)-pnorm(14, mean, sd)), 2)
(1 / 12) / 100
0.0008333333 * 1000
sqrt(0.8333333)
pnorm(1000, .5, 0.9128709)
pnorm(1, .5, 0.9128709)
pnorm(10, .5, 0.9128709)
pnorm(1.5, .5, 0.9128709)
pnorm(5, .5, 0.9128709)
pnorm(2.5, .5, 0.9128709)
.5/100
sqrt(1000)
ppois(10, lambda=5*3)
round(0.1184644)
pbinorm(4, 5, 1)
pbinom(4, 5, 1)
pbinom(4, size=5, prob=.5)
pbinom(3, size=5, prob=.5)
0.96875 * 100
round(96.875)
3*4*7
qnorm(.95, mean=mu, sd=sd)
75/sqrt(100)
qnorm(.95, mean=1100, sd = 7.5)
75/sqrt(100)
round(qnorm(.95, mean=1100, sd = 7.5))
qnorm(.95, mean = 1100, sd = 75)
pbinom(5, size=5, prob=.5)
pbinom(4, size=5, prob=.5)
ppois(4, lambda = 5 * .5)
round(ppois(4, lambda = 5 * .5))
ppois(4, lambda = 5)
ppois(5, lambda = 5)
ppois(4, lambda = 2.5)
0.4404933 * 2
5 * (.5 ^ 5) + (.5 ^ 9)
choose(5, 4) * .5 ^ 5 + choose(5, 5) * .5 ^ 5
pbinom(3, size = 5, prob = .5, lower.tail = F)
pbinom(3, size = 5, prob = .5, lower.tail = F) * 100
round(pbinom(3, size = 5, prob = .5, lower.tail = F) * 100)
SE <- 1 / 12
SE <- sqrt(SE / 1000)
SEeeeeeee
SE
200+212+133
6200-600
10/80
round(12.5)
(52 + 75) / 2
75 / (100 - 63.5)
2.054795 / 100
30/100
1-.985
1-.635
x <- 75 * .3
x / (x + ((1 - .365) * .7))
0.9806272 * 100
(1 / 12) / (1000 * 100)
(1 / 12) / (1000)
(1 / 12) / (100)
(1 / 12) / sqrt(1000 * 100)
(1 / 12) / sqrt(1000)
8/11
(7 / 8) * 100
(8 / 11) * 100
(87.5 + 72.72727) / 2
(8 / 9) * 100
(7 / 8) * 25
(8 / 11) * 25
(8 / 9) * 25
21.875 + 18.18182 + 22.22222
21.875 + 18.18182
27*82
colors()
pal <- colorRamp(c("darkblue", "red"))
pal(1)
pal(2)
pal(3)
pal
pal(.3)
library(RColorBrewer)
brewer.pal(3, 'BuGn')
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
image(volcano, col = pal(30))
rgb(red)
rgb("red")
(1 / 12) / 100
sqrt(0.0008333333)
sd(c(mean(runif(10)),mean(runif(10)),mean(runif(10)),mean(runif(10)),mean(runif(10))))
sd(c(mean(runif(100)),mean(runif(100)),mean(runif(100)),mean(runif(100)),mean(runif(100))))
sd(c(mean(runif(1000)),mean(runif(1000)),mean(runif(1000)),mean(runif(1000)),mean(runif(1000))))
(1 / 12) / 100
(1 / 12) / sqrt(100)
sqrt(100)
(1 / 12) / 10
(1 / 12) / sqrt(1000)
1000 * 100
sqrt(1000 * 100)
(1 / 12) / sqrt(1000 * 100)
(1 / 12) / sqrt(100)
(1 / 12) / sqrt(1000)
(1 / 12) / sqrt(10000)
.7*.2
.14/.8
.7-0.175
0.525 + .2
1-.985
(52 + 75) / 2
1 - .635
(.75 * .3) / ((.75 * .3) + (.365 * .7))
0.4682622 * 100
.75 / (1 - .635)
.7*2.054
2.054*.3
sd <- sqrt(1 / 12)
sd
sqrt(10000)
sqrt(1000)
sd / sqrt(1000)
sd / sqrt(100)
sd / sqrt(1000)
sd / sqrt(100)
.7/.8
1 - .875
(.875 * .8) / ((.875 * .8) + (.125 * .2))
1 - 0.9655172
round(0.0344828 * 100)
(.75 * .3) / ((.75 * .3) + (.48 * .7))
(.75 * .3) / ((.75 * .3) + (.365 * .7))
9/11
10/11
1 - .635
.3 * .365
.1/100
30/100
(.75 * .3) / ((.75 * .3) + (.365 * .7))
.75 / .365
(10 / 11) * 100
(7 / 8) * 100
(90.90909 + 100 + 87.5) / 3
(10 / 11) * 25
(7 / 8) * 25 + (10 / 11) * 25
-6 / 1.645
pnorm(-3.647416, lower.tail = F)
round(pnorm(-3.647416, lower.tail = F))
round(0.9998)
1 - .35
6 / 1.645
pnorm(1.645, mean=2, sd=3.647416)
pnorm(.95, mean=2, sd=3.647416)
6 / 1.645
round(3.647416)
round(-3.647416)
pnorm(3.647416)
round(0.4612325)
setwd("F:/Data Science/5. Reproducible Research/Week2/Project1")
data <- read.csv("activity.csv")
dataFrame <- data.frame(data$steps, data$date, data$interval)
time <- as.factor(sprintf("%02d:%02d", data$interval %/% 100, data$interval %% 100))
df <- cbind(data, time)
dim(time)
time
plot(time)
res <- tapply(df$steps, df$time, na.rm=T, mean)
dim(res)
plot(res, time)
head(res)
as.numeric(as.character(res))
plot(as.numeric(as.character(res)))
plot(as.num)
plot(df$time, as.numeric(as.character(res)))
df$time
unique(df$time)
plot(unique(df$time), as.numeric(as.character(res)))
plot(unique(df$time), as.numeric(as.character(res)))(res)), lwd = 2, type = "l")
minInt <- unique(df$time)
avgVal <- as.numeric(as.character(res))
plot(minInv, avgVal, lwd = 2, type = "l")
plot(minInt, avgVal, lwd = 2, type = "l")
plot(minInt, avgVal, type = "l")
cbind(minInt, avgVal)
cbind(time, avgVal)
time
cbind(time, avgVal)
cbind(time, res)
hist(minInt, avgVal)
res <- tapply(df$steps, df$time, na.rm=T, mean)
res
max(res)
which(res)
which.max(res)
day <- c(weekdays(as.Date(dataFrame$data.date)))
i <- day == "Sunday" | day == "Saturday"
day[i] <- "weekend"
day[!i] <- "weekday"
day <- as.factor(day)
dataFrame <- cbind(dataFrame, day)
head(day)
head(dataFrame)
tapply(dataFrame$steps, dataFrame$day, na.rm = T, mean)
tapply(dataFrame$steps, dataFrame$day, mean)
tapply(dataFrame$steps, dataFrame$date, mean)
tapply(dataFrame$data.steps, dataFrame$day, mean)
tapply(dataFrame$data.steps, dataFrame$day, na.rm = T, mean)
w <- tapply(dataFrame$data.steps, dataFrame$day, na.rm = T, mean)
plot(minInt, w)
dim(minInt)
as.numeric(as.character(w))
plot(dataFrame$data.Interval, dataFrame$day)
head(dataFrame)
plot(dataFrame$data.interval, dataFrame$day)
plot(dataFrame$data.interval, dataFrame$day, type = "l")
d <- as.numeric(as.character(dataFrame$day))
tapply(dataFrame$data.steps, dataFrame$day, na.rm = T, sum)
tapply(dataFrame$data.steps, dataFrame$data.interval, na.rm = T, mean)
d <- tapply(dataFrame$data.steps, dataFrame$data.interval, na.rm = T, mean)
dim(d)
minInt
plot(d, minInt, type = "l")
plot(minInt, d, type = "l")
d
panel.xyplot(minInt, d, ...)
library(lattice)
panel.xyplot(minInt, d, ...)
panel.xyplot(minInt, d)
clear
